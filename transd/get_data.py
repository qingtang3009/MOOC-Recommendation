# -*- coding:utf-8 -*-
"""
Function: data creator.
Input: Non.
Output: Non.
Author: Qing TANG
"""
import json
import random
from tqdm import tqdm


def load_data(entity_path, relation_path, triplet_path, entity_items_path):

    with open(entity_path, 'r', encoding='utf-8') as e:
        entity_dic = json.load(e)
    entity_list = list(entity_dic.values())

    with open(relation_path, 'r', encoding='utf-8') as e:
        relation_dic = json.load(e)
    relation_list = list(relation_dic.values())

    with open(entity_items_path, 'r', encoding='utf-8') as ei:
        entity_items_dic = json.load(ei)

    triplet_list = []
    with open(triplet_path, 'r', encoding='utf-8') as f:
        for line in tqdm(f.readlines()):
            line_list = []
            for str_ in line.strip().split():
                line_list.append(int(str_))
            triplet_list.append(line_list)

    return entity_list, relation_list, triplet_list, entity_items_dic


class Data:
    def __init__(self, entity_list, triplet_list, entity_items_dic):
        super(Data, self).__init__()
        self.entities = entity_list
        self.triplets = triplet_list
        self.entity_items = entity_items_dic

    def negative_sampling(self, triplet):
        seed = random.random()
        if seed > 0.5:
            while True:
                # sample(list, k) returns a new list of length k, which stores k random unique elements generated by the list.
                entity_ = random.sample(self.entities, 1)[0]
                if entity_ in self.entity_items.keys():
                    k = len(list(set(self.entity_items[str(entity_)]).intersection(set(self.entity_items[str(triplet[0])]))))
                else:
                    k = 0
                if entity_ != triplet[0] and k == 0:
                    break
            negative_triplet = [entity_, triplet[1], triplet[2]]
        else:
            while True:
                entity_ = random.sample(self.entities, 1)[0]
                if entity_ != triplet[2] and (entity_ not in self.entity_items[str(triplet[0])]):
                    break
            negative_triplet = [triplet[0], triplet[1], entity_]
        return negative_triplet

    def data(self):
        golden_triplets = self.triplets
        negative_triplets = []
        for triplet in golden_triplets:
            negative_triplets.append(self.negative_sampling(triplet))
        return golden_triplets, negative_triplets
